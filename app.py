import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import ExtraTreesClassifier #optimising the dataset
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# st.markdown("<h1 style='text-align: center; color: black;'>Malware Detection Using Machine Learning</h1>", unsafe_allow_html=True)

st.title("Malware Detection System")
st.image("Tech.jpg")

malData = pd.read_csv("MalwareData.csv", sep="|")
legit = malData[0:41323].drop(["legitimate"], axis=1)
mal = malData[41323::].drop(["legitimate"], axis=1)

st.subheader("Dataset")
tick= st.checkbox("Check the size of legit and malware dataset")
if tick == True:
    st.write("The shape of the legit dataset is: %s samples, %s features"%(legit.shape[0],legit.shape[1]))
    st.write("The shape of the malware dataset is: %s samples, %s features"%(mal.shape[0],mal.shape[1]))
    tick1= st.checkbox("Check the columns in the dataset")
    if tick1 == True:
        st.write(malData.columns)
        tick2= st.checkbox("Check the features with the values")
        if tick2 == True:
            pd.set_option("display.max_columns", None)
            st.write(malData.head(10))

st.subheader("Selection of important features")
data_in = malData.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = malData['legitimate'].values #malData only gonna look into legitimate values
extratrees = ExtraTreesClassifier().fit(data_in,labels)
select = SelectFromModel(extratrees,prefit=True) #select according to importance
data_in_new = select.transform(data_in)
st.write("Old data:",data_in.shape) #to check difference between old data and new data
sel= st.selectbox("Extract the important features:",['-Select-','Extract Features'])
if sel == "Extract Features":
    st.write("New data:",data_in_new.shape)
    tick3= st.checkbox("check the values important features extracted")
    if tick3 == True:
        features = data_in_new.shape[1]
        importances = extratrees.feature_importances_
        indices = np.argsort(importances)[::-1]

        for f in range(features):
            st.write("%d"%(f+1),malData.columns[2+indices[f]],importances[indices[f]])

st.subheader("Training and Testing our model")
legit_train, legit_test, mal_train, mal_test = train_test_split(data_in_new, labels, test_size=0.2, random_state=42)

@st.cache(suppress_st_warning=True)
def model_selection():
    models = [RandomForestClassifier]
    accuracy_test=[]
    model = []
    for m in models:
        model_name = type(m()).__name__
        st.write('######-Model => {}'.format(type(m()).__name__))
        model_ = m()
        model_.fit(legit_train, mal_train)
        pred = model_.predict(legit_test)
        acc = accuracy_score(pred, mal_test)
        accuracy_test.append(acc)
        model.append(model_name)
        st.write('Test Accuracy : {:.5f}%'.format(acc*100))
        st.write('Classification_report')
        tab = classification_report(mal_test, pred, output_dict=True)
        df = pd.DataFrame(tab).transpose()
        st.write(df)
        st.write('Confusion_matrix')
        cf_matrix = confusion_matrix(mal_test, pred)
        plot_ = sns.heatmap(cf_matrix, annot=True, fmt= 'g')
        st.pyplot()
        st.set_option('deprecation.showPyplotGlobalUse', False)
        st.write('Normalized Confusion_matrix')
        plot1_ = sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True,fmt= '0.2%')
        st.pyplot()
        st.set_option('deprecation.showPyplotGlobalUse', False)
        st.write('###################- End -###################')

@st.cache(suppress_st_warning=True)
def model_selection1():
    models = [KNeighborsClassifier]
    accuracy_test=[]
    model = []
    for m in models:
        model_name = type(m()).__name__
        st.write('######-Model => {}'.format(type(m()).__name__))
        model_ = m()
        model_.fit(legit_train, mal_train)
        pred = model_.predict(legit_test)
        acc = accuracy_score(pred, mal_test)
        accuracy_test.append(acc)
        model.append(model_name)
        st.write('Test Accuracy : {:.5f}%'.format(acc*100))
        st.write('Classification_report')
        tab = classification_report(mal_test, pred, output_dict=True)
        df = pd.DataFrame(tab).transpose()
        st.write(df)
        st.write('Confusion_matrix')
        cf_matrix = confusion_matrix(mal_test, pred)
        plot_ = sns.heatmap(cf_matrix, annot=True, fmt= 'g')
        st.pyplot()
        st.set_option('deprecation.showPyplotGlobalUse', False)
        st.write('Normalized Confusion_matrix')
        plot1_ = sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True,fmt= '0.2%')
        st.pyplot()
        st.set_option('deprecation.showPyplotGlobalUse', False)
        st.write('###################- End -###################')

@st.cache(suppress_st_warning=True)
def model_selection2():
    models = [AdaBoostClassifier]
    accuracy_test=[]
    model = []
    for m in models:
        model_name = type(m()).__name__
        st.write('######-Model => {}'.format(type(m()).__name__))
        model_ = m()
        model_.fit(legit_train, mal_train)
        pred = model_.predict(legit_test)
        acc = accuracy_score(pred, mal_test)
        accuracy_test.append(acc)
        model.append(model_name)
        st.write('Test Accuracy : {:.5f}%'.format(acc*100))
        st.write('Classification_report')
        tab = classification_report(mal_test, pred, output_dict=True)
        df = pd.DataFrame(tab).transpose()
        st.write(df)
        st.write('Confusion_matrix')
        cf_matrix = confusion_matrix(mal_test, pred)
        plot_ = sns.heatmap(cf_matrix, annot=True, fmt= 'g')
        st.pyplot()
        st.set_option('deprecation.showPyplotGlobalUse', False)
        st.write('Normalized Confusion_matrix')
        plot1_ = sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True,fmt= '0.2%')
        st.pyplot()
        st.set_option('deprecation.showPyplotGlobalUse', False)
        st.write('###################- End -###################')



test = st.selectbox("Choose a model:", ['-Select-','RandomForest','KNeighbors','AdaBoost'])
if test == "RandomForest":
    model_selection()
elif test == "KNeighbors":
    model_selection1()
elif test == "AdaBoost":
    model_selection2()
